#format of object module#
##object module consists of 5 parts##
 * header
 * code block
 * data block
 * symbol tables
  * export
  * import

##binary header##
Header contains 4 integers 32 bit each. first integer defines starting point of data block. Second
integer defines starting point of export table and third integer defines start of import table
The last integer defines start of the label usage table

##code block##
Code block locates right after header (8 bytes from beginning).
It consists of 5 byte sub blocks. first byte of sub block defines mode for linker to operate 
instructions address. Value 0 means there is no label in instruction. linker will just copy this kind 
of instructions to executable. Value 1 means there is internal label. linker will copy particular 
label to address field. value 2 means label that must be imported from other module. Labels with value
of 3 are global (export) labels. last 4 bytes of each subblock is instruction to 
copy (operated with labels as above)

###data block marker byte###
Marker byte indicates whether there is an exported, imported, local or a direct address used in the instruction.
This is needed for correctly linking multiple modules.

Byte values: #TODO textual descriptions
    * No label (0)
    * Local label (1)
    * Imported label (2)
    * Exported label (3)

##data block##
data block contains data of that module; Integers coded to 32 bit.

##symbol table##
Symbol table consists of 34 byte sub blocks. each sub block contains 32 bytes reserved to label name 
and value of that label (16 bit integer ). Label values are ralative to start of that block. External 
labels are valued from -1 to down.

##structure##

                    | start of data |  import start | export start  | label usage start
                    +---------------+---------------+---------------+---------------+
+--------------+    | 32bit integer | 32bit integer | 32bit integer | 32bit integer |
| header       | -> +---------------+---------------+---------------+---------------+
+--------------+    +-------------+-------------------+
| code block   | -> | 8bit marker | 32bit instruction | <--- n times marker and isntruction
+--------------+    +-------------+-------------------+
| data block   | -> variables reserved with dc and ds pseudo commands
+--------------+    +---------------+---------------+
| import table | -> | 32 char label | 16bit integer |
+--------------+    +---------------+---------------+
| export table | -> | 32 char label | 16bit integer |
+--------------+    +---------------+---------------+
| label usage  | -> | 32bit integer | 32 char label |
+--------------+    +---------------+---------------+

#binary file#

#TODO binary file structure

##binary header##
If the object modules are linked without debug flag the binary header only contains one field. That field contains the counter value
of the last code line address in memory. The address is converted to negative so that machine loader knows the size of the header is 1 word.

+----------------------------------------+
|-last code address when binary is loaded|
+----------------------------------------+

if the object modules are linked with debug flag, then the binary header contains more information.
There is 2 fields for each linked object module. Those fields contains values of code_start and
data_start for each module. After code and data pointers there is one value more. It is the value
of usage list start. So there is overall 2n +1 fields in header (n is the amount of linked modules)

+---------------+---------------+---------------+-----+-------------+
| code[1] start | data[1] start | code[2] start | ... | usage start |
+---------------+---------------+---------------+-----+-------------+

Every field in the header is one machine word (32bit integer)

##compiling in debug mode##
    * every label position is stored in a table and placed in the end of a created object file

##debug label table##
+---------------------------+------------+
| address of the used label | label name |
+---------------------------+------------+

##linking in debug mode##
    * the debug label tables in the object files are updated with module constants and placed all together in the end of the finished binary file
    * in debug mode starts and ends of the data area in modules are also placed in the header of the binary file

##summary##
+----------------+
|header          | -> Can be one filed "normal" header or longer -g header.
+----------------+
|code and data   | -> code and data areas of each module. This part of binary file is loaded to machines memory
+----------------+
|label usage list| -> only when linked with -g
+----------------+